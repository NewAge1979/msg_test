-- ТАБЛИЦЫ.
-- Таблица для хранения информации о пользователях.
CREATE TABLE users (
    id                   BIGINT GENERATED BY DEFAULT AS IDENTITY    NOT NULL,
    phone                VARCHAR(16)                                NOT NULL,
    password_hash        VARCHAR(512),
    last_name            VARCHAR(64),
    first_name           VARCHAR(64)              DEFAULT 'NewUser' NOT NULL,
    nickname             VARCHAR(32)              DEFAULT 'NewUser' NOT NULL,
    email                VARCHAR(64),
    created              TIMESTAMP WITH TIME ZONE DEFAULT NOW()     NOT NULL,
    modified             TIMESTAMP WITH TIME ZONE,
    last_login           TIMESTAMP WITH TIME ZONE,
    is_deleted           BOOLEAN                  DEFAULT FALSE,
    phone_is_verified    BOOLEAN                  DEFAULT FALSE,
    email_is_confirmed   BOOLEAN                  DEFAULT FALSE,
    personal_information TEXT,
    CONSTRAINT pk_users PRIMARY KEY (id)
);
COMMENT ON TABLE users IS 'Список пользователей.';
COMMENT ON COLUMN users.id IS 'Идентификатор записи в таблице.';
COMMENT ON COLUMN users.phone IS 'Номер мобильного телефона пользователя.';
COMMENT ON COLUMN users.password_hash IS 'Hash код пароля пользователя. Оставлен для двойной аутентификации.';
COMMENT ON COLUMN users.last_name IS 'Фамилия пользователя.';
COMMENT ON COLUMN users.first_name IS 'Имя пользователя.';
COMMENT ON COLUMN users.nickname IS 'Nickname пользователя.';
COMMENT ON COLUMN users.email IS 'Адрес электронной почты пользователя.';
COMMENT ON COLUMN users.created IS 'Дата создания учетной записи пользователя.';
COMMENT ON COLUMN users.modified IS 'Дата последнего редактирования учетной записи пользователя.';
COMMENT ON COLUMN users.last_login IS 'Дата последнего входа пользователя в систему.';
COMMENT ON COLUMN users.is_deleted IS 'Признак удаления пользователя.';
COMMENT ON COLUMN users.phone_is_verified IS 'Признак того, что пользователь подтвердил свой номер телефона.';
COMMENT ON COLUMN users.email_is_confirmed IS 'Признак того, что пользователь подтвердил адрес электронной почты.';
COMMENT ON COLUMN users.personal_information IS 'Краткая информация пользователя для раздела "О себе".';

-- Таблица для хранения OTP.
CREATE TABLE otp_codes (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    otp_code   VARCHAR(6)                              NOT NULL,
    user_id    BIGINT                                  NOT NULL,
    created    TIMESTAMP WITH TIME ZONE DEFAULT NOW()  NOT NULL,
    expires    TIMESTAMP WITH TIME ZONE,
    is_expired BOOLEAN                  DEFAULT FALSE,
    CONSTRAINT pk_otp_codes PRIMARY KEY (id)
);
COMMENT ON TABLE otp_codes IS 'OTP коды для регистрации/аутентификации.';
COMMENT ON COLUMN otp_codes.id IS 'Идентификатор записи в таблицы.';
COMMENT ON COLUMN otp_codes.otp_code IS 'OTP код для регистрации/аутентификации.';
COMMENT ON COLUMN otp_codes.user_id IS 'Идентификатор пользователя (ссылка на таблицу users).';
COMMENT ON COLUMN otp_codes.created IS 'Время создания OTP кода.';
COMMENT ON COLUMN otp_codes.expires IS 'Время истечения OTP кода.';
COMMENT ON COLUMN otp_codes.is_expired IS 'Признак истечения OTP кода.';

-- Таблица для хранения ролей.
CREATE TABLE roles (
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    code        VARCHAR(16)                             NOT NULL,
    description VARCHAR(512),
    is_deleted  BOOLEAN  DEFAULT FALSE                  NOT NULL,
    created     TIMESTAMP WITH TIME ZONE                NOT NULL,
    modified    TIMESTAMP WITH TIME ZONE,
    level_id    SMALLINT DEFAULT 0                      NOT NULL,
    CONSTRAINT pk_roles PRIMARY KEY (id)
);
COMMENT ON TABLE roles IS 'Список ролей.';
COMMENT ON COLUMN roles.id IS 'Идентификатор записи в таблице.';
COMMENT ON COLUMN roles.code IS 'Код роли.';
COMMENT ON COLUMN roles.description IS 'Описание роли.';
COMMENT ON COLUMN roles.is_deleted IS 'Признак удаление роли.';
COMMENT ON COLUMN roles.created IS 'Дата создания роли.';
COMMENT ON COLUMN roles.modified IS 'Дата последнего редактирования роли.';
COMMENT ON COLUMN roles.level_id IS 'Уровень роли: 0 - роль уровня чата, 1 - роль уровня сервиса.';

-- Таблица для хранения чатов.
CREATE TABLE chats (
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name        VARCHAR(256)                            NOT NULL,
    description VARCHAR(512),
    status_id   BIGINT  DEFAULT 0                       NOT NULL,
    owner_id    BIGINT                                  NOT NULL,
    created     TIMESTAMP WITH TIME ZONE                NOT NULL,
    modified    TIMESTAMP WITH TIME ZONE,
    is_deleted  BOOLEAN DEFAULT FALSE,
    CONSTRAINT pk_chats PRIMARY KEY (id)
);
COMMENT ON TABLE chats IS 'Список чатов.';
COMMENT ON COLUMN chats.id IS 'Идентификатор записи в таблице.';
COMMENT ON COLUMN chats.name IS 'Наименование чата.';
COMMENT ON COLUMN chats.description IS 'Описание чата.';
COMMENT ON COLUMN chats.status_id IS 'Статус чата: 0 - чат 1 на 1, 1 - открытый групповой чат, 2 - приватный групповой чат.';
COMMENT ON COLUMN chats.owner_id IS 'Идентификатор владельца чата (ссылка на таблицу users).';
COMMENT ON COLUMN chats.created IS 'Дата создания чата.';
COMMENT ON COLUMN chats.modified IS 'Дата последнего редактирования чата.';
COMMENT ON COLUMN chats.is_deleted IS 'Признак удаления чата.';

-- Таблица для связи таблиц: users, roles и chats.
CREATE TABLE users_chats_roles (
    user_id  BIGINT                   NOT NULL,
    chat_id  BIGINT                   NOT NULL,
    role_id  BIGINT                   NOT NULL,
    created  TIMESTAMP WITH TIME ZONE NOT NULL,
    modified TIMESTAMP WITH TIME ZONE,
    CONSTRAINT pk_users_chats_roles PRIMARY KEY (user_id, chat_id, role_id)
);
COMMENT ON TABLE users_chats_roles IS 'Связующая таблица для связи таблиц: users, chats, roles.';
COMMENT ON COLUMN users_chats_roles.user_id IS 'Идентификатор пользователя (ссылка на таблицу users).';
COMMENT ON COLUMN users_chats_roles.chat_id IS 'Идентификатор чата (ссылка на таблицу chats). Если роль уровня сервиса, то 0.';
COMMENT ON COLUMN users_chats_roles.role_id IS 'Идентификатор роли (ссылка на таблицу roles).';
COMMENT ON COLUMN users_chats_roles.created IS 'Дата создания связи.';
COMMENT ON COLUMN users_chats_roles.modified IS 'Дата последнего редактирования связи.';

-- Таблица для хранения сообщений.
CREATE TABLE messages (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    message    TEXT                                    NOT NULL,
    chat_id    BIGINT,
    message_id BIGINT,
    user_id    BIGINT,
    is_deleted BOOLEAN DEFAULT FALSE                   NOT NULL,
    created    TIMESTAMP WITH TIME ZONE                NOT NULL,
    modified   TIMESTAMP WITH TIME ZONE,
    CONSTRAINT pk_messages PRIMARY KEY (id)
);
COMMENT ON TABLE messages IS 'Список сообщений.';
COMMENT ON COLUMN messages.id IS 'Идентификатор записи в таблице.';
COMMENT ON COLUMN messages.message IS 'Текст сообщения.';
COMMENT ON COLUMN messages.chat_id IS 'Идентификатор чата (ссылка на таблицу chats).';
COMMENT ON COLUMN messages.message_id IS 'Идентификатор сообщения для цитирования (ссылка на таблицу messages).';
COMMENT ON COLUMN messages.user_id IS 'Идентификатор автора сообщения (ссылка на таблицу users).';
COMMENT ON COLUMN messages.is_deleted IS 'Признак удаления сообщения.';
COMMENT ON COLUMN messages.created IS 'Дата создания сообщения.';
COMMENT ON COLUMN messages.modified IS 'Дата последнего редактирования сообщения.';

-- Таблица для хранения вложений для сообщений.
CREATE TABLE attachments (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    type       VARCHAR(64)                             NOT NULL,
    url        VARCHAR(256)                            NOT NULL,
    message_id BIGINT                                  NOT NULL,
    CONSTRAINT pk_attachments PRIMARY KEY (id)
);
COMMENT ON TABLE attachments IS 'Список вложений.';
COMMENT ON COLUMN attachments.id IS 'Идентификатор записи в таблице.';
COMMENT ON COLUMN attachments.type IS 'Тип вложения.';
COMMENT ON COLUMN attachments.url IS 'Ссылка на вложение.';
COMMENT ON COLUMN attachments.message_id IS 'Идентификатор сообщения (ссылка на таблицу messages).';

-- Таблица не прочитанных сообщений.
CREATE TABLE unread_messages (
    user_id    BIGINT NOT NULL,
    message_id BIGINT NOT NULL,
    CONSTRAINT pk_unread_messages PRIMARY KEY (user_id, message_id)
);
COMMENT ON TABLE unread_messages IS 'Список непрочитанных сообщений.';
COMMENT ON COLUMN unread_messages.user_id IS 'Идентификатор пользователя (ссылка на таблицу users).';
COMMENT ON COLUMN unread_messages.message_id IS 'Идентификатор сообщения (ссылка на таблицу messages).';

-- Таблица для логирования ошибок ввода пользователем OTP и блокировок пользователя.
CREATE TABLE log_access (
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id  BIGINT                                  NOT NULL,
    log_type INTEGER                                 NOT NULL,
    created  TIMESTAMP WITH TIME ZONE                NOT NULL,
    expired  TIMESTAMP WITH TIME ZONE                NOT NULL,
    CONSTRAINT pk_log_access PRIMARY KEY (id)
);
COMMENT ON TABLE log_access IS 'Логирование ошибок ввода OTP кода и блокировок.';
COMMENT ON COLUMN log_access.id IS 'Идентификатор записи в таблице.';
COMMENT ON COLUMN log_access.user_id IS 'Ссылка на пользователя.';
COMMENT ON COLUMN log_access.log_type IS 'Тип логируемого события:
1 - не верно введен OTP код;
2 - пользователь заблокирован.';
COMMENT ON COLUMN log_access.created IS 'Дата регистрации события.';
COMMENT ON COLUMN log_access.expired IS 'Дата истечения события.';

-- ОГРАНИЧЕНИЯ.
ALTER TABLE users ADD CONSTRAINT uq_nickname UNIQUE (nickname);
ALTER TABLE users ADD CONSTRAINT uq_phone UNIQUE (phone);
ALTER TABLE otp_codes ADD CONSTRAINT fk_users_otp_codes FOREIGN KEY (user_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE roles ADD CONSTRAINT uq_code UNIQUE (code);
ALTER TABLE chats ADD CONSTRAINT fk_owners_chats FOREIGN KEY (owner_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE SET NULL;
ALTER TABLE users_chats_roles ADD CONSTRAINT fk_users FOREIGN KEY (user_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE users_chats_roles ADD CONSTRAINT fk_chats FOREIGN KEY (chat_id) REFERENCES chats (id) ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE users_chats_roles ADD CONSTRAINT fk_roles FOREIGN KEY (role_id) REFERENCES roles (id) ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE messages ADD CONSTRAINT fk_users_messages FOREIGN KEY (user_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE SET NULL;
ALTER TABLE messages ADD CONSTRAINT fk_chats_messages FOREIGN KEY (chat_id) REFERENCES chats (id) ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE messages ADD CONSTRAINT fk_messages FOREIGN KEY (message_id) REFERENCES messages (id) ON UPDATE NO ACTION ON DELETE SET NULL;
ALTER TABLE attachments ADD CONSTRAINT fk_messages_attachments FOREIGN KEY (message_id) REFERENCES messages (id) ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE unread_messages ADD CONSTRAINT fk_unread_messages_user FOREIGN KEY (user_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE unread_messages ADD CONSTRAINT fk_unread_messages_message FOREIGN KEY (message_id) REFERENCES messages (id) ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE log_access ADD CONSTRAINT fk_log_access_users FOREIGN KEY (user_id) REFERENCES users (id) ON UPDATE NO ACTION ON DELETE CASCADE;

-- ПРЕДСТАВЛЕНИЯ.
-- Заблокированнные пользователи.
CREATE VIEW blocked_user AS
SELECT DISTINCT user_id
FROM log_access
WHERE ((log_type = 2) AND (created <= now()) AND (expired >= now()));

-- Новые пользователи.
CREATE VIEW new_user AS
SELECT id
FROM users
WHERE (phone_is_verified = false);

-- Пользователь + OTP.
CREATE VIEW user_and_otp_code AS
SELECT t1.id,
       t1.phone,
       t2.otp_code
FROM (users t1
    LEFT JOIN otp_codes t2
      ON (((t2.user_id = t1.id) AND ((now() >= t2.created) AND (now() <= t2.expires) AND (t2.is_expired = false)))));