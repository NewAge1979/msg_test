openapi: 3.0.3
info:
  title: Messenger's API Documentation
  version: '1.0.0'
servers:
  - url: http://localhost:8080/api/v1

paths:
  /auth/getOTPcode:
    post:
      tags:
        - Authentication service
      description: Generating and sending a token.
      operationId: getOTPCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOTPCodeRequest'
      responses:
        '200':
          description: Success generate and send OTP code.
  /auth/signUp:
    post:
      tags:
        - Authentication service
      description: Sign up method.
      operationId: signUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: Success sign up.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAndSignInAndRefreshTokensSuccess'
        '400':
          description: Bad credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAndSignInAndRefreshTokensError'
  /auth/signIn:
    post:
      tags:
        - Authentication service
      description: Sign in method.
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: Success sign in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAndSignInAndRefreshTokensSuccess'
        '400':
          description: Bad credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAndSignInAndRefreshTokensError'
  /auth/refreshTokens:
    post:
      tags:
        - Authentication service
      description: Tokens refresh method.
      operationId: refreshTokens
      parameters:
        - in: header
          name: refreshToken
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success refresh tokens.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAndSignInAndRefreshTokensSuccess'
        '401':
          description: Unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAndSignInAndRefreshTokensError'
  /auth/signOut:
    post:
      tags:
        - Authentication service
      description: Sign out method.
      operationId: signOut
      parameters:
        - in: header
          name: accessToken
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success sign out.
  /support/createTicket:
    post:
      tags:
        - Support service
      description: Creating a ticket for support.
      operationId: createSupportTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
      responses:
        '201':
          description: Success creating ticket for support.
        '400':
          description: Bad Request

components:
  schemas:
    GetOTPCodeRequest:
      type: object
      required:
        - phone
        - action
      properties:
        phone:
          type: string
          pattern: '^\d{10}$'
          description: Mobile phone number.
          example: '9999999999'
        action:
          type: string
          description: 'Action type: "signUp" for registration, "signIn" for authentication.'
          example: 'signUp'
    SignUpRequest:
      type: object
      required:
        - phone
        - firstName
        - nickName
        - otp
      properties:
        phone:
          type: string
          pattern: '^\d{10}$'
          description: Mobile phone number.
          example: '9999999999'
        firstName:
          type: string
          pattern: '^[A-Za-zА-Яа-я\s]*$'
          maxLength: 64
          description: First name.
          example: 'John'
        lastName:
          type: string
          pattern: '^[A-Za-zА-Яа-я\s]*$'
          maxLength: 64
          nullable: true
          description: Last name.
          example: 'Doe'
        nickName:
          type: string
          minLength: 5
          maxLength: 32
          description: Nickname.
          example: 'John Doe'
        aboutMe:
          type: string
          maxLength: 160
          nullable: true
          description: About me.
          example: ''
        otp:
          type: string
          minLength: 6
          maxLength: 6
          description: OTP code.
          example: '123456'
    SignInRequest:
      type: object
      required:
        - phone
        - otp
      properties:
        phone:
          type: string
          pattern: '^\d{10}$'
          description: Mobile phone number.
          example: '9999999999'
        otp:
          type: string
          minLength: 6
          maxLength: 6
          description: OTP code.
          example: '123456'
    SignUpAndSignInAndRefreshTokensSuccess:
      type: object
      properties:
        accessToken:
          type: string
          description: Token for access.
        refreshToken:
          type: string
          description: Token for refresh.
    SignUpAndSignInAndRefreshTokensError:
      properties:
        message:
          type: string
          description: Error message.
    CreateTicketRequest:
      type: object
      required:
        - phone
        - email
        - text
      properties:
        phone:
          type: string
          pattern: '^\d{10}$'
          description: Mobile phone number.
          example: '9999999999'
        email:
          type: string
          #pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          description: E-mail.
          example: 'JohnDoe@yandex.ru'
        text:
          type: string
          minLength: 3
          maxLength: 500
          description: Ticket text.
          example: 'Ticket text.'